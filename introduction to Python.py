# -*- coding: utf-8 -*-
"""HW1_Simner_Sidney.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_KdnmDNtPGeZycasc8Ulo3X5lizFvnxf

## **Homework 1**

### Create a copy of the notebook to start answering the questions. Name your notebook in the format HW1_lastname_firstname.ipynb to facilitate the grading process. 

### Answer all the questions, test your code to ensure there are no errors and the results are as expected. Once you have answered all the questions, save the final copy, then go to File-> click on Download.ipynb. Once the local copy has been downloaded, submit your file on Blackboard under the corresponding assignment section. Also provide us a link to your notebook during submission. 

### **The due date of this homework is 02/05/2021 (Friday).**

### Please ensure you follow all the steps mentioned in the homework.

### All the questions have a sample input and output to help you understand the question. Please note that your programs will be tested for other sets of inputs and outputs along with the sample provided. So test your code for other inputs.

### You can submit your solutions any number of times until the deadline.

##### Q1. Write a program that prompts the user to enter a password then prints the length of the password.

```
Enter your password: hello
Your password is 5 long.
```
"""

# Type solution here
password = input("Enter your password: ")
print("Your password is", len(password), "long.")

"""##### Q2. Write a program that prompts the user to enter their full name then prints the number of characters in their name (do not count spaces).

```
What is your name? Amulya Katti
Amulya Katti your name has 11 characters.
```
"""

# Type solution here
name = input("What is your name? ")
nospace = name.replace(" ", "")
print(name + ", your name has", len(nospace), "characters.")

"""##### Q3. Write a program that prompts the user to enter a month (as a number), then prints the name of the month and the number of days in that month. Ensure that the user inputs a valid month and handle any error cases.

```
Enter the month number: 9
September has 30 days
```
"""

# get user input 
choice = input("Enter the month number: ")

#check for valid input 
while choice.isdigit() == False or int(choice) not in range(1,13):
  choice = input("Enter the month number: ")

#convert to int
choice = int(choice)

#dictionaries
months = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}
days = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}

#output
print(months[choice], "has", days[choice], "days")

"""##### Q4. Write a program that prompts the user to enter a loan amount, annual interest rate, and number of years  for a car loan. Then calculate and print the monthly payment amount.

Note:
```
PMT= [PV*i*((1+i)^n)]/((1+i)^n)-1
```
PMT is the monthly payment

PV is the loan amount

i is the interest rate per month in decimal form (interest rate percentage divided by 12)

n is the number of months (term of the loan in months)

```
Loan Amount: 30000.00
Annual Interest Rate: 4.00
Years: 5
Your monthly payment is: $552.50
```
"""

# get user input and check for valid input
loanamt = input("Loan Amount: ")
while loanamt.replace(".", "").isdigit() == False:
  loanamt = input("Loan Amount: ")
loanamt = float(loanamt)

yearrate = input("Annual Interst Rate: ")
while yearrate.replace(".", "").isdigit() == False:
  yearrate = input("Annual Interest Rate: ")
monthrate = ((float(yearrate) / 100) / 12)

years = input("Years: ")
while years.replace(".", "").isdigit() == False:
  years = input("Years: ")
months = (float(years) * 12)

#calculate payment 
pmt = loanamt * (monthrate * (1 + monthrate) ** months) / ((1 + monthrate) ** months - 1)

#leave only two decimal places
pmt = round(pmt, 2)

#output
print("Your montly payment is: $" + str(pmt))

"""##### Q5. Write a program to that prompts the user to enter a string. Then check whether or not the string is a palindrome.

```
Enter a string: Madam
Madam, is a palindrome!
```
"""

# get user input 
string = input("Enter a string: ")

#convert string to all lowercase, convert to list
stringlower = string.lower()
wordlist = list(stringlower)

#check for pallendrome
pallendrome = True

#compare char by char for the first entry
for index in range(len(string)):
    backIndex = (len(wordlist) - 1) - index
    if wordlist[index] != wordlist[backIndex]:
        pallendrome = False

#display if the entry is a pallendrome
if pallendrome:
    print(string + ", is a pallendrome!")
else:
    print(string + ", is a pallendrome!")

"""##### Q6. Write a program to compute and print all possible combinations of change for \$1. Denominations to be considered – quarter, dime, nickel, penny.

Hint: Use nested loops (loops within loops for the various denominations of coins)

```
Change for $1:
0 quarters, 0 dimes, 0 nickels, 100 pennies
…
4 quarters, 0 dimes, 0 nickels, 0 pennies
```
"""

#convert dollar to cents
#b0 = initial balance, each new balance represented but updated number
b0 = 100

for q in range(int(b0 / 25) + 1): 
    b1 = b0 - 25 * q 
    for d in range(int(b1 / 10) + 1): 
        b2 = b1 - 10 * d 
        for n in range(int(b2 / 5) + 1): 
          p = b2 - 5 * n
          print(q,"quarters,",d,"dimes,",n,"nickles:",p,"pennies:")

"""##### Q7. Ask the user to enter two positive integers between 1 and 100. Read those integers. Then output a multiplication table of the first number times the second number. 

Note: You have to ensure the entered numbers are between 1 and 100 only.

```
Please enter an integer: 5
Please enter another integer: 20
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
…
5 x 20 = 100
```
"""

# get user input and check for valid input
num1 = input("Please enter an integer: ")
while num1.isdigit() == False or int(num1) not in range(1,101):
  num1 = input("Invalid, please enter an integer: ")

num2 = input("Please enter another integer: ")
while num2.isdigit() == False or int(num2) not in range(1,101):
  num2 = input("Invalid, please enter an integer:")

#convert to int
num1 = int(num1)
num2 = int(num2)

#print multification table
for i in range(1,(num2+1)):
  print(num1, "x", i, "=", (i*num1))

"""##### Q8. Write a program to ask the user to enter a password. Then check to see if it is a valid password based on these requirements -

Must be at least 8 characters long

Must contain both uppercase and lowercase letters

Must contain at least one number between 0-9

Must contain a special character -!,@,#,$

If the password is not valid, ask the user to re-enter. This should continue until the user enters a valid password. After a valid password is entered, print Access Granted!

```
Please enter a password. Follow these requirements - 
a. Must be at least 8 characters long
b. Must contain both uppercase and lowercase letters
c. Must contain at least one number between 0-9
d. Must contain a special character -!,@,#,$
Password: HelloWorld1
Invalid password. Try again!
Password: Hello@World1
Access Granted!
```

"""

#print directions
print("Please enter a password. Follow these requirements - \n a. Must be at least 8 characters long \n b. Must contain both uppercase and lowercase letters \n c. Must contain at least one number between 0-9 \n d. Must contain a special character -!,@,#,$")

# get user input 
password = input("Password:")

#function to check password validity
def valid(password):
  plist = list(password)

  #check for uppercase and lowercase 
  up = False
  low = False
  for i in plist:
    if i.isupper():
      up = True
    if i.islower():
      low = True

  #check for number
  num = False
  for i in plist:
    if i.isdigit():
      if int(i) in range(0,10):
        num = True

  #check for special character 
  char = False
  chars = ['!', '@', '#', '$']
  for i in plist:
    if i in chars:
      char = True

  #check if valid 
  if len(password) >= 8 and up and low and num and char:
    return True
  else: 
    return False

#output
while valid(password) == False:
  password = input("Password:")
  
print("Access Granted!")

"""##### Q9. Given the score sheet of participants in a competition, you are required to find the runner-up score. You are given scores in a list. Find the score of the runner-up.

```
list1 - [2, 3, 6, 6, 5]
runner_up - 5

list2 - [1, 7, 5, 3, 10, 4, 5, 5, 6, 11]
runner_up - 10
```
"""

# given lists 
list1 = [2, 3, 6, 6, 5]
list2 = [1, 7, 5, 3, 10, 4, 5, 5, 6, 11]

#funciton to get runner up
def runner_up(x):
  #remove repeated values
  uniqueList = []
  for item in x:
    if item not in uniqueList:
      uniqueList.append(item)
  #sort
  uniqueList.sort()
  return uniqueList[-2]

#output
print(list1, "Runner up:", runner_up(list1))
print(list2, "Runner up:", runner_up(list2))